-- Add contributor access tokens and schedule patterns
-- This migration enables token-based access for contributors to view their assigned dates

-- Add access_token and schedule_pattern to dgr_contributors
ALTER TABLE dgr_contributors
ADD COLUMN IF NOT EXISTS access_token TEXT UNIQUE,
ADD COLUMN IF NOT EXISTS schedule_pattern JSONB;

-- Generate tokens for existing contributors (they can be regenerated by admin)
UPDATE dgr_contributors
SET access_token = gen_random_uuid()::text
WHERE access_token IS NULL;

-- Make access_token NOT NULL after populating existing rows
ALTER TABLE dgr_contributors
ALTER COLUMN access_token SET NOT NULL;

-- Create index on access_token for fast lookups
CREATE INDEX IF NOT EXISTS idx_dgr_contributors_access_token ON dgr_contributors(access_token);

-- Add comment explaining schedule_pattern structure
COMMENT ON COLUMN dgr_contributors.schedule_pattern IS
'JSON pattern defining contributor schedule:
- {"type": "day_of_month", "value": 13} = 13th of every month
- {"type": "day_of_week", "value": 2} = Every Tuesday (0=Sunday, 6=Saturday)
- {"type": "specific_dates", "dates": ["2025-12-25"]} = Specific dates array
- {"type": "custom"} = Manual assignment only, no pattern
- null = Manual assignment only';

-- Function to generate a new access token for a contributor
CREATE OR REPLACE FUNCTION generate_contributor_access_token()
RETURNS TEXT AS $$
BEGIN
  RETURN encode(gen_random_bytes(32), 'hex');
END;
$$ LANGUAGE plpgsql;

-- Function to get contributor's assigned dates (actual + pattern-based)
-- Returns dates from dgr_schedule where contributor is assigned
-- OR calculated dates from pattern where no schedule entry exists yet
CREATE OR REPLACE FUNCTION get_contributor_assigned_dates(
  contributor_uuid UUID,
  months_ahead INT DEFAULT 12
)
RETURNS TABLE(
  date DATE,
  schedule_id UUID,
  has_content BOOLEAN,
  status TEXT,
  reflection_title TEXT,
  reflection_content TEXT
) AS $$
DECLARE
  pattern JSONB;
  pattern_type TEXT;
  start_date DATE := CURRENT_DATE;
  end_date DATE := CURRENT_DATE + (months_ahead || ' months')::INTERVAL;
  calculated_date DATE;
BEGIN
  -- First, return all actual schedule entries for this contributor
  RETURN QUERY
  SELECT
    s.date::DATE,
    s.id,
    (s.reflection_content IS NOT NULL AND s.reflection_content != '') AS has_content,
    s.status::TEXT,
    s.reflection_title,
    s.reflection_content
  FROM dgr_schedule s
  WHERE s.contributor_id = contributor_uuid
    AND s.date BETWEEN start_date AND end_date
  ORDER BY s.date;

  -- Then, calculate pattern-based dates that don't have schedule entries yet
  SELECT schedule_pattern INTO pattern
  FROM dgr_contributors
  WHERE id = contributor_uuid;

  IF pattern IS NOT NULL THEN
    pattern_type := pattern->>'type';

    -- Day of month pattern (e.g., 13th of every month)
    IF pattern_type = 'day_of_month' THEN
      FOR calculated_date IN
        SELECT (DATE_TRUNC('month', d) + ((pattern->>'value')::INT - 1 || ' days')::INTERVAL)::DATE
        FROM generate_series(start_date, end_date, '1 month'::interval) AS d
      LOOP
        -- Only return if no schedule entry exists for this date
        IF NOT EXISTS (
          SELECT 1 FROM dgr_schedule
          WHERE date = calculated_date AND contributor_id = contributor_uuid
        ) THEN
          RETURN QUERY
          SELECT calculated_date, NULL::UUID, FALSE, NULL::TEXT, NULL::TEXT, NULL::TEXT;
        END IF;
      END LOOP;

    -- Day of week pattern (e.g., every Tuesday)
    ELSIF pattern_type = 'day_of_week' THEN
      FOR calculated_date IN
        SELECT d::DATE
        FROM generate_series(start_date, end_date, '1 day'::interval) AS d
        WHERE EXTRACT(DOW FROM d) = (pattern->>'value')::INT
      LOOP
        IF NOT EXISTS (
          SELECT 1 FROM dgr_schedule
          WHERE date = calculated_date AND contributor_id = contributor_uuid
        ) THEN
          RETURN QUERY
          SELECT calculated_date, NULL::UUID, FALSE, NULL::TEXT, NULL::TEXT, NULL::TEXT;
        END IF;
      END LOOP;
    END IF;
  END IF;

  RETURN;
END;
$$ LANGUAGE plpgsql;

-- Insert 31 test contributors, one for each day of the month (1st through 31st)
INSERT INTO dgr_contributors (name, email, access_token, schedule_pattern, active)
VALUES
  ('Day 1 Contributor', 'day1@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 1}'::jsonb, true),
  ('Day 2 Contributor', 'day2@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 2}'::jsonb, true),
  ('Day 3 Contributor', 'day3@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 3}'::jsonb, true),
  ('Day 4 Contributor', 'day4@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 4}'::jsonb, true),
  ('Day 5 Contributor', 'day5@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 5}'::jsonb, true),
  ('Day 6 Contributor', 'day6@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 6}'::jsonb, true),
  ('Day 7 Contributor', 'day7@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 7}'::jsonb, true),
  ('Day 8 Contributor', 'day8@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 8}'::jsonb, true),
  ('Day 9 Contributor', 'day9@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 9}'::jsonb, true),
  ('Day 10 Contributor', 'day10@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 10}'::jsonb, true),
  ('Day 11 Contributor', 'day11@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 11}'::jsonb, true),
  ('Day 12 Contributor', 'day12@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 12}'::jsonb, true),
  ('Day 13 Contributor', 'day13@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 13}'::jsonb, true),
  ('Day 14 Contributor', 'day14@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 14}'::jsonb, true),
  ('Day 15 Contributor', 'day15@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 15}'::jsonb, true),
  ('Day 16 Contributor', 'day16@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 16}'::jsonb, true),
  ('Day 17 Contributor', 'day17@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 17}'::jsonb, true),
  ('Day 18 Contributor', 'day18@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 18}'::jsonb, true),
  ('Day 19 Contributor', 'day19@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 19}'::jsonb, true),
  ('Day 20 Contributor', 'day20@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 20}'::jsonb, true),
  ('Day 21 Contributor', 'day21@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 21}'::jsonb, true),
  ('Day 22 Contributor', 'day22@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 22}'::jsonb, true),
  ('Day 23 Contributor', 'day23@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 23}'::jsonb, true),
  ('Day 24 Contributor', 'day24@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 24}'::jsonb, true),
  ('Day 25 Contributor', 'day25@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 25}'::jsonb, true),
  ('Day 26 Contributor', 'day26@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 26}'::jsonb, true),
  ('Day 27 Contributor', 'day27@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 27}'::jsonb, true),
  ('Day 28 Contributor', 'day28@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 28}'::jsonb, true),
  ('Day 29 Contributor', 'day29@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 29}'::jsonb, true),
  ('Day 30 Contributor', 'day30@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 30}'::jsonb, true),
  ('Day 31 Contributor', 'day31@example.com', encode(gen_random_bytes(32), 'hex'), '{"type": "day_of_month", "value": 31}'::jsonb, true)
ON CONFLICT (email) DO NOTHING;
