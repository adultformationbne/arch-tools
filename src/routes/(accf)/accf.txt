
I'm building for work a platform to handle some of our wordpress CMS stuff and manage these daily reflections we do, but I've been tasked with building a platform for an 8 week course for for in person and online people. We dont need to enroll them but they get given a log in, they progress through and write reflections each week. I want this to be at a separate domain but i'm wondering if we should do a whole separate codebase and app with its own supabase db, or have it all one codebase and db and route the student page to a separate domain with vercel.

Tech stack is sveltekit and vercel. 

Pros for option 1 is cleaner codebases.
Pros for option 2 is centrazlized codebase is easier to maintain so

You've laid out the key tradeoff well - separation vs. centralization. Given your tech stack (SvelteKit + Vercel) and requirements, I'd lean toward Option 2 (single codebase with domain routing) for several reasons:

Why Single Codebase Makes Sense
Shared Infrastructure Benefits:

User management, authentication, and permissions can be unified
Shared components for reflections, writing interfaces, progress tracking
Single deployment pipeline and monitoring setup
Easier to implement features that might span both systems later
SvelteKit + Vercel Makes This Easy:

Vercel's domain routing is seamless - you can point different domains to the same app
SvelteKit's routing lets you cleanly separate concerns with different route groups
You can use layout files to completely different UX/branding per domain
Suggested Architecture
src/routes/
├── (admin)/           # Your internal WordPress/CMS stuff
├── (student)/         # 8-week course platform
│   ├── +layout.svelte # Different styling/branding
│   ├── week-[id]/     # Dynamic week routes
│   └── reflections/   # Student reflection interface
└── +layout.svelte     # Shared base layout
Use domain detection in your root layout to route users appropriately:

javascript
// Check domain and redirect/style accordingly
if (url.hostname === 'course.yourdomain.com') {
  // Student experience
} else {
  // Admin/CMS experience  
}
Database Considerations
Even with one codebase, you could still partition logically:

Separate database schemas/tables for course vs CMS data
Use RLS (Row Level Security) in Supabase to enforce data boundaries
Different API routes/endpoints for each domain's needs
This gives you the maintenance benefits of a single codebase while keeping data appropriately separated.

What's your timeline for this project? That might influence whether the initial setup complexity of two codebases is worth it.

okay so if they go to arch-tools.vercel.app they would just get a login for our internal tools but if they went to accf-platform.com it would be its own login but the same backend.

Exactly! That's a clean approach. You'd have:

arch-tools.vercel.app → Internal staff login → CMS/admin tools accf-platform.com → Student login → 8-week course platform

Implementation Strategy
Domain-based routing in your root layout:

javascript
// src/app.html or root layout
const isStudentDomain = url.hostname === 'accf-platform.com';
const isInternalDomain = url.hostname.includes('arch-tools');

// Redirect to appropriate login/dashboard based on domain
Separate Auth Flows:

Same Supabase instance, but different user tables or user roles
internal_users vs course_students tables, or a single users table with a user_type field
Different sign-up/login pages styled appropriately for each audience
Route Structure:

src/routes/
├── (internal)/        # arch-tools.vercel.app routes
│   ├── login/
│   ├── cms/
│   └── reflections-admin/
├── (student)/         # accf-platform.com routes  
│   ├── login/
│   ├── week-[id]/
│   └── my-reflections/
└── +layout.svelte     # Domain detection & routing logic
Benefits of this approach:

Completely different user experiences and branding
Shared backend logic for reflections, user management, etc.
One deployment, one database, but totally separate user journeys
Easy to implement features that might need to work across both (like admin viewing student progress)
This feels like the sweet spot for your requirements. Are you planning to have any crossover features, like internal staff needing to view/moderate student reflections?

Here’s the db layout for the ACCF

Users 
Optionally assigned into Hubs
Hubs are like a group of people doing the accf remotely so they come together in a home or a parish hall and watch the live stream and do the reflections and discussions together in person.
People get assigned to hubs and there’s a hub coordinator.
Then you have the modules there’s 4 modules with 8 weeks per module the happen twice a year so it takes 2 years to do all 4 modules.
Enrolment is unique per module so different people do it each time.
Then you would have the cohort which would be what users are assigned to what module and starting when. 
Then you have the 8 sessions in the module and that needs to contain resources, documents, video links, 
Students need to complete a written reflection each session and that will be marked by an admin and given feedback on. We need to track attendance (hub coordinators mark who was present and admin staff track attendance at the flagship in person session where it’s filmed from) for each session and there needs to be some business logic that flags certain students for missing 3 or more session they can no longer progress to the next session or something.

Why don’t we talk at a high level, how this works, what the end goal is before we start to build out a schema I want you to fully understand what the goal is and how it works

Thanks for laying that out! Let me make sure I understand the full picture of how ACCF works:

The ACCF Program Structure
4 modules total, each with 8 weekly sessions
Takes 2 years to complete all modules (modules run twice per year)
Each module is a separate enrollment - people can join different modules at different times
Two Types of Participation
Hub-based (distributed): Groups meet in homes/parish halls, watch livestream together, do discussions locally with a hub coordinator
Flagship (central): In-person attendance at the main location where it's filmed
Key Roles
Students: Complete reflections, attend sessions
Hub Coordinators: Manage local groups, track attendance for their hub
Admin Staff: Mark reflections, give feedback, track flagship attendance, manage progression rules
The Student Journey
Enroll in a specific module/cohort (starting at a particular time)
Attend 8 weekly sessions (either at hub or flagship)
Write reflections after each session
Get feedback on reflections from admin
Must maintain attendance (can't miss 3+ sessions or face progression restrictions)
Complete module, then potentially enroll in next module
Questions to clarify the workflow:
Cohort timing: When you say modules happen "twice a year" - are there set start dates like January and July? Or rolling enrollment?

Hub assignment: Are students assigned to hubs based on geography, or do they choose? Can they switch between hub and flagship attendance?

Reflection timing: Do reflections get submitted before the next session? Is there a deadline?

Progression rules: When someone misses 3+ sessions, do they get kicked out entirely, or can they restart the module later?

Does this capture the essence of how ACCF operates?

Start dates in Feb and a start date in August and yes it goes for 8 weeks from that start date. We handle enrolment somewhere else so on the first night they get their login and are on boarded. 
Reflections have a final due date, they don’t need much business logic in terms of tracking who’s done what and excluding them from things if they haven’t. Only about 60% typically do the reflections. 

I think if we kind of progressively reveal the sessions by assigning each user in a a cohort to a week and move them along week by week we can optionally choose to not move someone along if they don’t attend until we can talk to them and sort something out.
For example after a session we send out all the materials the next day and the reflection question (by triggering a x person is now in week 7 and they get an email and they can now see the week 7 session stuff in their platform) but if someone hasn’t attended we can optionally choose to not put them to week 7 yet until we’ve sorted it out

Perfect! That clarifies a lot. So the flow is:

The Weekly Progression System
Default behavior: After each session, students automatically advance to the next week and get:

Email notification
Access to that week's materials/resources
New reflection question
Admin override: For students who didn't attend, admins can choose to "hold" them at their current week until they sort things out

Key Insights:
External enrollment - you just receive a list of students to set up
Progressive reveal - students only see current/past weeks, not future content
Flexible progression - most advance automatically, but admins can pause individuals
Low-pressure reflections - 60% completion rate is expected/acceptable
Simple attendance tracking - binary present/absent per session
This suggests a schema around:
Cohorts (Feb 2025 Module 1, Aug 2025 Module 2, etc.)
User progression state (which week they're currently on)
Session content (materials, videos, reflection prompts per week)
Admin controls to advance/hold specific users
The beauty of this approach is it's very manageable - you're not trying to enforce strict completion rules, just facilitating the natural flow while giving admins control when needed.

Does that match your vision? Should we start sketching out the database schema with this progressive reveal system in mind?

Are there any more questions you had? Think through the experience for the admin, the hub coordinator and the student

Great idea to think through each user journey! Let me walk through what I'm envisioning and flag my questions:

Student Experience
Login → Dashboard showing current week → Access materials (videos, documents) → Submit reflection → View past weeks

Questions:

Do students see other students in their cohort/hub, or is it just their individual journey?
Can they access past reflections and feedback easily?
Any community features or discussion boards, or is interaction only in-person?
Hub Coordinator Experience
Login → See their hub's roster → Mark attendance for each session → View student progress/engagement

Questions:

Do hub coordinators see which of their students have submitted reflections?
Can they send messages/reminders to their hub members?
Do they get any reports (like "3 people haven't submitted week 5 reflections")?
Can they see the same materials students see, or do they have coordinator-specific resources?
Admin Experience
Login → Cohort management dashboard → Review/mark reflections → Manage student progression → Track attendance across all locations

Questions:

How do admins handle the reflection marking workflow? Batch processing or individual?
When giving feedback, is it structured (rubric/scores) or just written comments?
Do admins need reporting/analytics (completion rates, engagement trends, etc.)?
How do they coordinate with hub coordinators about attendance issues?
Do they need to see cross-cohort data, or focus on one cohort at a time?
Cross-cutting Questions:
Notifications: Who gets what emails/alerts and when?
Mobile usage: Do any of these users primarily use phones?
Offline access: Do hub coordinators need to work offline during sessions?
What stands out as most important to get right from the start?

We’ll leave communication out of the MVP. They can use email or other channels for now. Hub coordinators see what students have submitted. Students nominate if they are happy for their reflection to be published for their cohort or if it’s personal opt out. 

Admins just get a list of reflections to mark and they read it mark it, comment and go to the next one. It’s just qualitative feedback and pass or fail 

For the rest of the questions use your best intuition. 

We’ll use resend for emails 
There’s usually about 60-70 per cohort.

Got it! Let me synthesize this into a clear database schema and user flows:

Database Schema (high level)
Core Tables:

users (id, email, name, role: student/hub_coordinator/admin)
hubs (id, name, coordinator_id)
modules (id, name, order) // Module 1, 2, 3, 4
cohorts (id, module_id, start_date, name) // "Feb 2025 Module 1"
enrollments (user_id, cohort_id, hub_id?, current_week)
sessions (id, module_id, week_number, title, materials_json)
reflections (id, user_id, session_id, content, is_public, status, feedback, marked_by)
attendance (id, user_id, session_id, cohort_id, present, marked_by)
User Experiences:
Student:

Dashboard shows current week + past weeks
Can see cohort-mates' public reflections
Submit reflection with public/private toggle
View feedback on marked reflections
Hub Coordinator:

Roster of their hub members with current week status
Mark attendance for their students
See reflection submission status
View public reflections from their hub
Admin:

Queue of unmarked reflections to review
Cohort management (advance/hold students)
Cross-cohort attendance tracking
Student progression controls
Email triggers (Resend):

Weekly advancement: "Week X materials now available"
Reflection submissions/feedback
Attendance reminders
Does this structure capture what you're envisioning? Should we start building out the actual schema with field details?

Can you see any gaps or holes in the process. Not easily solveable problems but ones that should be tacked now

Looking at this system, I see a few potential gaps that could cause headaches if not addressed upfront:

Data Integrity & Edge Cases
Cohort/Module Timing Conflicts:

What if someone misses most of Module 1 but Module 2 is starting? Do they restart Module 1 with the next cohort or jump to Module 2?
How do you handle someone who's done Module 1 & 2, skips a year, then wants to do Module 3?
Hub Management:

What happens when a hub coordinator leaves mid-module?
Can students switch hubs during a module (life circumstances, moving, etc.)?
Hub capacity limits - do you need to track/enforce max hub sizes?
Attendance Data Ownership:

Hub coordinators mark their students, admins mark flagship attendees - but what about overlaps? Can someone attend both hub AND flagship in the same week?
Who has authority if there's a discrepancy in attendance records?
System State Management
"Holding" Students:

When you hold someone at week 5, do they still get the week 6 email?
How do you bulk "release" held students after resolving issues?
Do held students see they're being held, or is it invisible to them?
Reflection Deadlines:

You mentioned final due dates - is this per reflection or end-of-module?
Can students submit late reflections for previous weeks they missed?
Admin Workflow Issues
Marking Efficiency:

With 60-70 students × 8 reflections = 500+ submissions per cohort. Any batching/filtering needed?
Do admins need to track which reflections they've already seen vs. new submissions?
The biggest one that jumps out is the module progression logic - having clear rules now will save a lot of manual admin work later.

If someone misses most of Module 1 but Module 2 is starting, the admin will decide whether to move them to Module 2 or leave them at Module 1 or remove them. The basic functionality or way of stemming someones progressing is a simple setting to say x user is on x module. KISS principle.

We handle someone who's done Module 1 & 2, skips a year, then wants to do Module 3 by the fact that they dont have to do all modules - they are all independant. A user can be assigned to multiple cohorts which themselves are assigned to a module so the user table may jave a jsonb column that just has the cohort-ids of all the mods theyve done. 

What happens when a hub coordinator leaves mid-module is that someone else can be assigned as hub coordinator. 

Students can switch hubs during a module (life circumstances, moving, etc.) by changing in the hubs table what students are assigned where. This gives them access to different information and their hub coordinator no longer would need to track their attendance. 
No Hub capacity limits

Attendance Data Ownership:
A students attendance is tracked once so if they rock up in person even though they are part of a hub someone will still track their attendance as there. The admin always has precendence.

System State Management
"Holding" Students:
* When you hold someone at week 5, they don't get the week 6 email.
Don't worry about bulk operations its a small cohort for now. 
Held students would know because it is week 7 but they cant see week 7 materials. 

Reflection Deadlines:
The final due dates for reflections are 2 weeks after the end of the Module. Students can do all of them at once if they choose. 
Admin Workflow Issues
Marking Efficiency:
* With 60-70 students × 8 reflections = 500+ submissions per cohort. Any batching/filtering needed? Yes we will need to assign students to admins and have a workflow where I as an admin can log in go to my marking tab and see a list of reflections to mark and i can just work through the list  these are MY reflections assigned to me by the system.

Perfect! That clears up all the edge cases. The KISS approach with admin discretion is smart - keeps the system flexible without over-engineering.

Key Design Decisions Locked In:
User-Module Relationship:

users.completed_cohorts (jsonb array of cohort IDs)
enrollments.current_week (admin can manually set/hold)
Independent modules = users can skip around
Attendance Hierarchy:

Admin attendance always wins
Simple reassignment for hub changes
One attendance record per student per session
Marking Workflow:

reflections.assigned_to (admin_user_id)
Admin dashboard shows "My assigned reflections to mark"
Simple list interface to work through
Remaining Technical Questions:
Email Logic:

When you advance someone from week 5 to week 6, does the email fire immediately or wait for a scheduled batch send?
Reflection Assignment:

How do you want to distribute reflections among admins? Round-robin? By student? By cohort?
Can admins see reflections that aren't assigned to them (for context/comparison)?
Session Materials:

Are materials the same across all cohorts of the same module, or do they vary by cohort/date?
Data Model Clarification:

Should current_week be on the user or the enrollment? (I'm thinking enrollment since a user could theoretically be in multiple active cohorts)
These feel like the last technical details before we can start building the actual schema. Sound about right?

When you advance someone from week 5 to week 6, does the email fire immediately or wait for a scheduled batch send? I think batch but we need to think about the workflow of moving everyone over. We probably should auto flag students who've missed 3 dates, maybe we have an advance cohort to next week modal and there you can deselect flagged or by discretion students or move over students who are flagged and then you bulk advance and then you hit send email.
Reflection Assignment:
* I want to distribute reflections among admins by just auto assigning by dividing the amount of students by the amount of admins marked and markers and a marker is assigned a student and they get all their reflections for the mod and that can be changed after. 
* Admins can see reflections that aren't assigned to them
Session Materials:
* Are materials the same across all cohorts of the same module, or do they vary by cohort/date. Materials will Evolve. We need to think through what materials they will be and how we handle them, maybe we should talk about that. 
Data Model Clarification:
* Should current_week be on the user or the enrollment? Well we only run one mod at a time if that helps so you can only be in one active cohort with one active week at a time

Great! That bulk advancement workflow makes perfect sense - gives admins full control while automating the tedious parts.

Advancement Workflow Locked In:
System flags students with 3+ absences
Admin opens "Advance Cohort to Week X" modal
Can deselect flagged students or manually deselect others
Bulk advance selected students
Send batch emails to advanced students
Reflection Assignment:
Auto-assign students to admins (divide evenly)
Each admin gets all of that student's reflections for the module
Admins can see all reflections but focus on their assigned students
Data Model:
Since only one active cohort per user, current_week can live on the enrollment.

Let's Talk Materials Management
This feels like a key decision point. What types of materials are we talking about?

Potential material types:

Videos (YouTube links? Hosted files? Live stream recordings?)
PDFs/Documents
Discussion questions
Reflection prompts
Additional readings/resources
Evolution considerations:

Do materials get updated between Feb and August cohorts of the same module?
Do you need version history (what did the Feb cohort see vs August)?
Are some materials cohort-specific (like welcome videos mentioning dates/coordinators)?
Storage approach options:

Simple JSON blob per session (easy but harder to track changes)
Separate materials table with versioning
File-based approach (upload to storage, reference URLs)
What's your sense of how materials will evolve and what types you're expecting?

I think reasonably we would have these types of materials. 
Each material is stored as a row and assigned to a mod and a week. 
* Videos (YouTube links only (could be embedded))
* PDFs/Documents/Powerpoint/WordDocs (uploaded and stored for download (dont need a web viewer)
* Additional readings/resources (always links)
* Native documents (meaning our own web page that acts as an online document, could be stored as mark down or basic html in json)
* Images

When creating a new cohort you assign a mod and we duplicate a previous iteration of that Mod (the previous times weve run THAT mod) session materials (everything from reflection questions which isnt a material to the materials for each week) and then you can go in and modify that mod's materials remove stuff add stuff ect

Perfect! That's a clean, flexible approach. Let me make sure I understand the duplication workflow:

Materials Schema:
materials (
  id, 
  cohort_id,           // Each cohort has its own copy
  week_number, 
  type,                // 'video', 'document', 'link', 'native', 'image'
  title, 
  content,             // YouTube URL, file path, markdown, etc.
  order,               // Display order within the week
  created_at, 
  updated_at
)
Cohort Creation Workflow:
Create new cohort (Feb 2025 Module 1)
Select source cohort to duplicate from (Aug 2024 Module 1)
System duplicates everything:
All materials for weeks 1-8
Reflection questions
Any other session content
Admin can then modify the new cohort's materials independently
Benefits:
Each cohort is completely independent (no accidental changes affecting past/future cohorts)
Easy to evolve materials over time
Clear audit trail of what each cohort actually saw
Can compare between iterations
Questions:
Reflection questions - are these stored similarly to materials, or separate table? I'm thinking:

session_content (
  id,
  cohort_id,
  week_number,
  reflection_question,  // Text field
  other_session_data    // JSONB for flexibility
)
File uploads - thinking Vercel blob storage or similar for the documents/images?

Does this match your vision for the duplication and materials management?

reflection questions get itys own table and reflection repsonses get its own table.

Perfect! So we'll have clean separation:

Tables Structure:
Materials:

materials (
  id, 
  cohort_id,
  week_number, 
  type,                // 'video', 'document', 'link', 'native', 'image'
  title, 
  content,             // YouTube URL, file path, markdown, etc.
  order,
  created_at, 
  updated_at
)
Reflection Questions:

reflection_questions (
  id,
  cohort_id,
  week_number,
  question_text,
  created_at,
  updated_at
)
Reflection Responses:

reflection_responses (
  id,
  user_id,
  reflection_question_id,
  content,
  is_public,           // Student's privacy choice
  status,              // 'submitted', 'marked', etc.
  feedback,
  marked_by,           // admin user_id
  assigned_to,         // admin user_id for marking
  submitted_at,
  marked_at
)
Duplication Process:
When creating a new cohort, system duplicates:

All materials (weeks 1-8)
All reflection questions (weeks 1-8)
Any other session content
Each gets the new cohort_id, so completely independent copies.

This keeps everything clean and separated. Ready to start building out the full schema with all the tables we've discussed?






